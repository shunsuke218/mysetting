#!/bin/bash

####################################################################################################
# Written by: Shunsuke Haga
# Date: 2017/02/07
# 
# This script automatically check tunnel status
# 
# Link: 
####################################################################################################

##############################
# Variable Declaration
##############################
ACCESS=( a1 a2 )
DC=( dca fra hkg lon sjc syd tyo )
LOG=/tmp/tunnellog
echo "" > "$LOG"
rm /tmp/tunnellog* &> /dev/null
RESULT=/tmp/tunnellog

tunnelip=
verbose=0
timeout=10
timeoutflag=false
location=()
locationflag=false
output=
outputflag=false
num=0
usage="$(basename "$0") 1234 [-h] [-l tyo hkg] [-o output.txt] [-t 20] [-v] -- This program automatically gathers the tunnel down information and prompts.\n
\n
where:\n
	[mandatory]\n
    -i/--tunnel:    Set tunnel id ( 1-9999 )\n
\n
    [optional]\n
    -h/--help/-?:   Show this help text\n
    -l/--location:  Set location ( dca sjc lon fra hkg syd )\n
    -o/--output:    Export output file ( alphanumeral and ._- )\n
	-t/--timeout:   Set timeout to certain second ( ~999 )\n
	-v/--verbose:   Set verbose mode"

##############################
# Check arguments
##############################
while :; do
	case $1 in
		-h|-\?|--help)
			echo $usage
			exit 0
			;;
		-i|--tunnel)
			locationflag=false
			timeoutflag=false
			outputflag=false
			;;
		-l|--location)
			locationflag=true
			timeoutflag=false
			outputflag=false
			;;
		-o|--output)
			locationflag=false
			timeoutflag=false
			outputflag=true
			;;
		-t|--timeout)
			locationflag=false
			timeoutflag=true
			outputflag=false
			;;
		-v|--verbose)
			locationflag=false
			timeoutflag=false
			outputflag=false
			verbose=$((verbose + 1))
			;;
		-?*)
			echo $usage
			exit 0
			;;
		*)
			if $locationflag; then
				location+=("$1")
			elif $timeoutflag; then
				timeout="$1"
				timeoutflag=false
			elif $outputflag; then
				output="$1"
				outputflag=false
			else
				tunnelip="$1"
			fi
	esac
	shift
	if [ -z "$1" ];then
	   break
	fi
done


##############################
# validate arguments
##############################
# Number validation
re='^[1-9][0-9]{0,3}$'
if ! [[ $tunnelip =~ $re ]] ; then
	echo "error: No valid number was given {1-9999}" >&2
	exit 1
fi

# If location is empty, use all $DC
if [ -z ${location[@]} ]; then
	location=("${DC[@]}")
fi

# Location validation
location=($(echo "${location[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
if diff <( printf "%s\n" "${DC[@]}" ) <( printf "%s\n" "${location[@]}" ) | grep ">" > /dev/null; then
	echo "error: Invalid location center (Acceptable: dca, sjc, lon, fra, hkg, syd)."
	exit 1
fi

# Timeout validation
re='^[1-9][0-9]{0,2}$'
if ![ -z "$timeout" ]  && ! [[ $timeout =~ $re ]] ; then
	echo "error: Not a valid time (1 - 999 seconds)" >&2
	exit 1
fi

# Output validation
re='^[a-zA-Z0-9.-_]+$'
if ![ -z "$output" ]  && ! [[ $output =~ $re ]] ; then
	echo "error: Not a valid filename (alphanumeral and ._-)" >&2
	exit 1
fi


##############################
# Main process
##############################
# Password input
echo -n "Enter the SSH password for $(whoami) "
read -se password
echo -ne '\n'

# Run ssh using expect. (Separate script)
for datacenter in ${location[@]}; do
	device=a1."$datacenter"2.plx
	# Feed the expect script a device list & the collected passwords
	########## TIMEOUT FOR TRACEROUTE? ##########
	########## $timeout * num? ##################
	echo "Processing $device..."
	./expect.exp $device $password $tunnelip $timeout $num 2>&1 & # Background ps
	let "$num++"
done

wait # Wait for all exps to finish its task.
echo "All done."

num=0
echo "$(date)\nTunnel log for $tunnelip " >> $LOG
# Extract all log data
for eachlog in /tmp/tunnellog_*; do
	# TUNEL DESCRIPTION: sh int tunnel-ip1234 des
	tunnel_description=$( awk '/#sh int tunnel-ip$tunnelip des/,/#sh log | i tunnel-$tunnelip/' $eachlog | sed '$ d' )
	grep "Interface not found" $eachlog &> /dev/null
	if [ "$?" == 0 ] || [ -z $tunnel_description ]; then
		continue
	fi
	# CIRCUIT LOG: sh log | i tunnel-ip2583
	circuit_log=$( awk '/#sh log | i tunnel-$tunnelip/,/#sh int tunnel-ip$tunnelip | i dest/' $eachlog | sed '$ d' )	
	# TRACEROUTE: traceroute 1.2.3.4 source 5.6.7.8
	traceroute=$( awk '/#traceroute  tunnel-$tunnelip/,0' $eachlog )

	
	# Merge all result into one
	echo "--------------------------------------------------" >> $LOG
	echo "LOCATION: " $( grep "RP/0/RSP0/CPU0:" $eachlog | cut -f 2 -d ":" | cut -f 1 -d "#" ) >> $LOG
	echo "TUNNEL DESCRIPTION: " >> $LOG
	echo $tunnel_description "\n\n" >> $LOG
	echo "CIRCUIT LOG: " >> $LOG
	echo $circuit_log "\n\n" >> $LOG
	echo "TRACEROUTE: " >> $LOG
	echo $traceroute "\n\n" >> $LOG
	let "$num++"
done
echo "--------------------------------------------------" >> $LOG
echo "Total Interface: $num" >> $LOG

# Print final output
cat $LOG

# Save if saving flag is not null
if [ -z "$output" ]; then
	echo "Saving to $output..."
	mv -i $LOG "./$output"
fi

echo '--------------------------------------------------'
echo ${location[@]}
echo $tunnelip
echo $verbose
echo '--------------------------------------------------'


password=
